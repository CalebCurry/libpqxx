#! /usr/bin/env python3

"""Generate feature checks for C++ features based on feature test macros.

This writes feature test programs, as well as CMake and autoconf configuration
for checking these feature flags.
"""

from argparse import ArgumentParser
from datetime import datetime
import os.path
from pathlib import Path
import sys
from textwrap import dedent
from typing import cast


class Fail(Exception):
    """Well-handled error.  No traceback."""


def parse_args():
    """Parse command-line arguments."""
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        '--source', '-s', metavar='DIRECTORY', type=Path, default=Path(),
        help="Source tree.  Defaults to current directry.")
    return parser.parse_args()


def read_features(source: Path) -> list[tuple[str, str]]:
    """Read list of C++ features.  Return as pairs of macro names.

    The features list is a whitespace-separated text file, with each line
    specifying a libpqxx feature macro naem followed by a C++ feature test
    macro name.

    :return: A list of pairs.
    """
    text = (source / 'cxx_features.txt').read_text(encoding='ascii')
    raw_lines = [line.strip() for line in text.splitlines()]
    return [
        cast(tuple[str, str], tuple(line.split()))
        for line in raw_lines
        if line != '' and not line.startswith('#')
    ]


# Template for a feature check program.
CHECK_TEMPLATE = dedent("""\
    // Feature check for '%(pqxx_macro)s'.
    // Generated by %(script)s at %(date)s UTC.
    #include <version>
    #if !defined(%(cxx_macro)s) || !%(cxx_macro)s
    #error "No support for %(pqxx_macro)s detected."
    #endif

    int main() {}
""")


def write_check(pqxx_macro: str, cxx_macro: str, output: Path) -> None:
    """Write a C++ feature check program."""
    params = {
        'pqxx_macro': pqxx_macro,
        'cxx_macro': cxx_macro,
        'date': datetime.utcnow(),
        'script': os.path.basename(__file__),
    }
    output.write_text(CHECK_TEMPLATE % params)


def write_checks(lines, source: Path) -> None:
    """Write check programs for features listed in `cxx_features.txt`."""
    dest = source / 'config-tests'
    for pqxx_macro, cxx_macro in lines:
        write_check(cxx_macro, pqxx_macro, dest / f'{pqxx_macro}.cxx')


# Template for a CMake feature check.
CMAKE_TEMPLATE = dedent("""\
    try_compile(
        %(pqxx_macro)s
        ${PROJECT_BINARY_DIR}
        SOURCES ${PROJECT_SOURCE_DIR}/config-tests/%(pqxx_macro)s.cxx
    )
""")


def write_cmake_config(lines, source: Path) -> None:
    """Write CMake sub-config to check each of these features."""
    dest = source / 'cmake' / 'pqxx_generated_checks.cmake'
    clauses = [
        CMAKE_TEMPLATE % {
            'pqxx_macro': pqxx_macro,
            'cxx_macro': cxx_macro,
        }
        for (pqxx_macro, cxx_macro) in lines
    ]
    dest.write_text('\n'.join(clauses), encoding='ascii')


# Template for an autoconf feature check.
AUTOCONF_TEMPLATE = dedent("""\
    AC_MSG_CHECKING([%(cxx_macro)s])
    %(pqxx_macro)s=yes
    AC_COMPILE_IFELSE(
        [read_test(%(pqxx_macro)s.cxx)],
        AC_DEFINE(
            [%(pqxx_macro)s],
            1,
            [Define if %(cxx_macro)s is present and true.]),
        %(pqxx_macro)s=no)
    AC_MSG_RESULT($%(pqxx_macro)s)
""")


def write_autoconf_config(lines, source: Path) -> None:
    """Write autoconf snippet to check each of these features."""
    dest = source / 'pqxx_generated_checks.ac'
    clauses = [
        AUTOCONF_TEMPLATE % {
            'pqxx_macro': pqxx_macro,
            'cxx_macro': cxx_macro,
        }
        for (pqxx_macro, cxx_macro) in lines
    ]
    dest.write_text('\n'.join(clauses), encoding='ascii')


def main():
    """Main entry point."""
    try:
        args = parse_args()
        lines = read_features(args.source)
        write_checks(lines, args.source)
        write_cmake_config(lines, args.source)
        write_autoconf_config(lines, args.source)
    except Fail as error:
        print(error, file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
